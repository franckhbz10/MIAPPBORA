# Script de PowerShell para test de integraci√≥n
# Backend ‚Üî Microservicio LLM

Write-Host "`n" -NoNewline
Write-Host ("üß™" * 35) -ForegroundColor Cyan
Write-Host "          TEST DE INTEGRACI√ìN COMPLETA" -ForegroundColor Yellow
Write-Host "     Backend ‚Üî Microservicio LLM ‚Üî Usuario" -ForegroundColor Yellow
Write-Host ("üß™" * 35) -ForegroundColor Cyan

$results = @()

# Test 1: Backend Health
Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "üîç TEST 1: Backend Health Check" -ForegroundColor Cyan
Write-Host ("=" * 70) -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -ErrorAction Stop
    Write-Host "‚úì Status: OK" -ForegroundColor Green
    Write-Host "‚úì App: $($response.app)" -ForegroundColor Green
    Write-Host "‚úì Version: $($response.version)" -ForegroundColor Green
    $results += @{Name="Backend Health"; Success=$true}
} catch {
    Write-Host "‚úó Error: $_" -ForegroundColor Red
    $results += @{Name="Backend Health"; Success=$false}
}

# Test 2: LLM Service Health
Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "ü§ñ TEST 2: Microservicio LLM Health Check" -ForegroundColor Cyan
Write-Host ("=" * 70) -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8001/api/llm/health" -ErrorAction Stop
    Write-Host "‚úì Status: OK" -ForegroundColor Green
    Write-Host "‚úì State: $($response.status)" -ForegroundColor Green
    Write-Host "‚úì Model: $($response.model)" -ForegroundColor Green
    Write-Host "‚úì Device: $($response.device)" -ForegroundColor Green
    Write-Host "‚úì Embeddings: $($response.embedding_model)" -ForegroundColor Green
    $results += @{Name="LLM Service Health"; Success=$true}
} catch {
    Write-Host "‚úó Error: $_" -ForegroundColor Red
    $results += @{Name="LLM Service Health"; Success=$false}
}

# Test 3: LLM Direct Generation
Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "üí¨ TEST 3: Generaci√≥n de texto directo (microservicio)" -ForegroundColor Cyan
Write-Host ("=" * 70) -ForegroundColor Gray

$messages = @(
    @{role="system"; content="Eres un asistente √∫til."},
    @{role="user"; content="Hola"}
)

Write-Host "`nMensaje: $($messages[1].content)" -ForegroundColor White
Write-Host "Generando respuesta... (30-60 segundos en CPU)" -ForegroundColor Yellow

try {
    $body = @{
        messages = $messages
        max_new_tokens = 30
    } | ConvertTo-Json -Depth 3

    $start = Get-Date
    $response = Invoke-RestMethod -Uri "http://localhost:8001/api/llm/generate" `
        -Method Post `
        -Body $body `
        -ContentType "application/json" `
        -TimeoutSec 120 `
        -ErrorAction Stop
    $duration = ((Get-Date) - $start).TotalSeconds

    Write-Host "`n‚úì Status: OK" -ForegroundColor Green
    Write-Host "‚úì Tiempo: $([math]::Round($duration, 2))s" -ForegroundColor Green
    Write-Host "‚úì Tokens generados: $($response.tokens_generated)" -ForegroundColor Green
    Write-Host "‚úì Device: $($response.device)" -ForegroundColor Green
    Write-Host "`nüìù Respuesta: $($response.answer)" -ForegroundColor White
    $results += @{Name="LLM Direct Generation"; Success=$true}
} catch {
    Write-Host "`n‚úó Error: $_" -ForegroundColor Red
    $results += @{Name="LLM Direct Generation"; Success=$false}
}

# Test 4: Verificar logs del backend
Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "üìã TEST 4: Verificar configuraci√≥n del backend" -ForegroundColor Cyan
Write-Host ("=" * 70) -ForegroundColor Gray

Write-Host "`nRevisando que el backend tenga configurado el microservicio..." -ForegroundColor Yellow
Write-Host "‚ö†Ô∏è Nota: Verificar los logs del backend en la otra terminal" -ForegroundColor Yellow
Write-Host "   Debe mostrar: '‚úì Microservicio LLM conectado'" -ForegroundColor Yellow
$results += @{Name="Backend Configuration"; Success=$true}

# Resumen
Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "üìä RESUMEN DE TESTS" -ForegroundColor Yellow
Write-Host ("=" * 70) -ForegroundColor Gray

foreach ($result in $results) {
    if ($result.Success) {
        Write-Host "‚úÖ PASS      - $($result.Name)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå FAIL      - $($result.Name)" -ForegroundColor Red
    }
}

$passed = ($results | Where-Object { $_.Success }).Count
$total = $results.Count

Write-Host "`n" -NoNewline
Write-Host ("=" * 70) -ForegroundColor Gray
Write-Host "Resultado Final: $passed/$total tests pasados ($([math]::Round($passed/$total*100, 1))%)" -ForegroundColor $(if ($passed -eq $total) {"Green"} else {"Yellow"})
Write-Host ("=" * 70) -ForegroundColor Gray

if ($passed -eq $total) {
    Write-Host "`nüéâ ¬°TODOS LOS TESTS PASARON!" -ForegroundColor Green
    Write-Host "‚úÖ El microservicio LLM est√° integrado correctamente" -ForegroundColor Green
} elseif ($passed -ge 3) {
    Write-Host "`n‚úÖ Tests cr√≠ticos pasados" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è Revisar los tests que fallaron" -ForegroundColor Yellow
} else {
    Write-Host "`n‚ö†Ô∏è Algunos tests fallaron - revisar configuraci√≥n" -ForegroundColor Red
}

Write-Host ""
